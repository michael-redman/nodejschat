nodejschat

Copyright 2016 Michael Redman
IN GOD WE TRVST.

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit

https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode


Install Linux archive dependencies:

#Debian
apt-get install nodejs npm

#CentOS
yum install nodejs npm

On whatever host will be your database server, also "apt-get install postgresql" or "yum install postgresql-server".


Install node dependencies:

#in this dir (same dir as package.json)
npm install


Configuration:

Create a database and import the schema with "psql yourdatabasename < schema.psql". See the postgresql documentation for creating database users and databases.

Edit ws_server/site_conf.js, and optionally html/site_conf.js if you are going to use the example HTML client, to match your settings.


Launching (on Debian the node.js executable name is "nodejs" instead of "node"):

Run websocket server (uses settings in ws_server/site_conf.js):

node ws_server/server.js

Optionally, run HTTP server for HTML+javascript client (uses settings in html/site_conf.js):

node html/server.js


User sessions:

It is the embedding application's responsibility to create a valid session key in the database table "sessions". Else the websocket server will reject connection.

Example SQL: insert into sessions values('1','Michael Redman');

Use SSL and use session keys that are cryptographically hard to guess, otherwise you will have no security whatsoever.


Connecting:

Example connect with command line test client (ws server on port 56412)

node test_client.js 1 wss://yourhost.com:56412/ 2 10

Note ":56412/" not ":56412". Else you will not connect.

This command says make 1 socket connection to the server at the specified URL and port, using the session key value "2", and each client socket (in this case one) should "say something" on the average once every 10 seconds.

Example URL for HTML client in browser:

https://yourhost.com:56411/chat?session_key=1


Limitations:

This application will not yet work with multiple processes and load balancing (either on the same server or across servers), because the logic to notify other instances when a message has arrived and needs to be distributed, has not yet been written. Clients will miss messages from users that are connected to a different process, even though the processes share the same database.


Bugs:

The system drops some messages.


IN GOD WE TRVST.
